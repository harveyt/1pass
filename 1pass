#!/bin/bash
#
# 1Password CLI command helper.
#
# Version: %%VERSION%%
#
# %%LICENSE%%
#
_1PASS_OP=${_1PASS_OP:-op}
_1PASS_JQ=${_1PASS_JQ:-jq}
_1PASS_VERBOSE=${_1PASS_VERSION:-false}
_1PASS_INPUT=${_1PASS_INPUT:-gui}
_1PASS_ASKPASS=${_1PASS_ASKPASS:-${SSH_ASKPASS:-ssh-askpass}}
_1PASS_CONFIG=${_1PASS_CONFIG:-$HOME/.op/config}
_1PASS_DOMAIN=${_1PASS_DOMAIN:-}
_1PASS_EMAIL=${_1PASS_EMAIL:-}
_1PASS_SECRET_KEY=${_1PASS_SECRET_KEY:-}
_1PASS_MASTER_PASSWORD=${_1PASS_MASTER_PASSWORD:-}

function usage()
{
    echo "usage: 1pass ...

Simple frontend 1Password information using 'op' 1Password CLI command.

-p title		Print the password for the given entry with 'title'.
-u title		Print the username for the given entry with 'title'.
-U title		Print the URL for the given entry with 'title'.
-s regexp		Print any titles which match the case-insensitive extended RE 'regexp'.
-l, --list		List all available titles.

-v, --verbose		Verbose output to stderr.
-V, --version		Print version to stderr.

-t, --terminal		Force use of TTY terminal for any password input.
-g, --gui		Force use of GUI for any password input.

--login			Ensure session is logged in.
			Must evaluate in shell (eg. 'eval \$(1pass --login)')
--logout		Ensure session is logged out.
			Must evaluate in shell (eg. 'eval \$(1pass --logout)')
--login-valid		Exit status 0 if session is valid, or non-zero if not.

--latest-signin		Print the short-hand for the latest signed in account.
--domain		Print the latest signed in account's domain.
--email			Print the latest signed in account's email.
--secret-key		Print the latest signed in account's secret.
--account-name		Print the latest signed in account name which contains master password.
--master-password	Print the latest signed in account's master.
" >&2
    exit 1
}

function show_version()
{
    echo "1pass %%VERSION%%" >&2
    exit 0
}

# --------------------------------------------------------------------------------
# Helpers
#

function error()
{
    echo "Error: 1pass: $*" >&2
    exit 1
}

function verb()
{
    [[ "$_1PASS_VERBOSE" != "true" ]] && return
    echo "1pass: $*" >&2
}

function eval_variable()
{
    local var="$1"
    eval echo \"\$"$var"\"
}

# --------------------------------------------------------------------------------
# 1Password query
#
function run_op()
{
    "$_1PASS_OP" "$@" </dev/null 2>/dev/null
}

function run_op_with_input()
{
    local input="$1"
    shift
    echo "$input" | "$_1PASS_OP" "$@" 2>/dev/null
}

function op_validate_query()
{
    local op_key="$1" op_field="$2" op_status="$3" op_value="$4"
    if [[ "$op_value" == "" || $op_status -ne 0 ]]; then
	error "cannot get $op_field for $op_key"
    fi
    echo "$op_value"
}

function get_op_item_field()
{
    local item_key="$1"
    local item_field_type="$2"
    local item_field="$3"
    local op_value="$(run_op get item "$item_key" | "$_1PASS_JQ" -r '.details.fields[] | select(.'"$item_field_type"'=="'"$item_field"'").value' 2>/dev/null)"
    local op_status=${PIPESTATUS[0]}
    op_validate_query "$item_key" "$item_field" "$op_status" "$op_value"
}

function get_op_item_overview()
{
    local item_key="$1"
    local item_field="$2"
    local op_value="$(run_op get item "$item_key" | "$_1PASS_JQ" -r '.overview.'"$item_field" 2>/dev/null)"
    local op_status=${PIPESTATUS[0]}
    op_validate_query "$item_key" "$item_field" "$op_status" "$op_value"
}

function get_op_item_username()
{
    local item_key="$1"
    get_op_item_field "$item_key" "designation" "username"
}

function get_op_item_password()
{
    local item_key="$1"
    get_op_item_field "$item_key" "designation" "password"
}

function get_op_item_url()
{
    local item_key="$1"
    get_op_item_overview "$item_key" "url"
}

function list_op_items()
{
    run_op list items | "$_1PASS_JQ" -r '.[] | select(.templateUuid == "001").overview.title' | sort
    local op_status=${PIPESTATUS[0]}
    if [[ $op_status -ne 0 ]]; then
	error "cannot get list of 1Password items"
    fi
}

function search_op_items()
{
    local search="$1"
    list_op_items | egrep -i "$search"
    local op_status=${PIPESTATUS[0]}
    if [[ $op_status -ne 0 ]]; then
	exit $op_status
    fi
}

function get_op_user_field()
{
    local user_key="$1"
    local user_field="$2"
    local op_value="$(run_op get user "$user_key" | "$_1PASS_JQ" -r '.'"$user_field" 2>/dev/null)"
    local op_status=${PIPESTATUS[0]}
    op_validate_query "$user_key" "$user_field" "$op_status" "$op_value"
}

# --------------------------------------------------------------------------------
# 1Password login/logout
#

function read_password_terminal()
{
    local prompt="$1"
    local pass=""

    if [[ "$TERM" == "dumb" ]]; then
	read -p "$prompt: " pass
    else
	read -s -p "$prompt: " pass
	echo "" >&2
    fi
    echo "$pass"
}

function read_password_gui()
{
    SSH_ASKPASS_TITLE="1Password" "$_1PASS_ASKPASS" "$prompt" 2>/dev/null
}

function read_password()
{
    local prompt="$1"
    local var="$2"
    local default="$3"
    
    while true
    do
	local var_value="$(eval_variable $var)"
	[[ "$var_value" != "" ]] && break

	eval $var=\""$(read_password_$_1PASS_INPUT "$prompt")"\" read_password_status=\$?
	if [[ $read_password_status -ne 0 ]]; then
	    return 1
	fi

	# If no value provided and default, use that.
	var_value="$(eval_variable $var)"
	if [[ "$var_value" == "" && "$default" != "" ]]; then
	    eval $var=\""$default"\"
	fi
    done
    return 0
}

function op_latest_signin()
{
    if [[ ! -f "$_1PASS_CONFIG" ]]; then
	return
    fi
    "$_1PASS_JQ" -r '.latest_signin' <"$_1PASS_CONFIG" 2>/dev/null
}

function op_config_value()
{
    local user="$1" field="$2"

    if [[ ! -f "$_1PASS_CONFIG" ]]; then
	return
    fi
    "$_1PASS_JQ" -r '.accounts[] | select(.shorthand == "'"$user"'").'"$field"'' <"$_1PASS_CONFIG" 2>/dev/null
}

function op_login_first_time()
{
    local default_domain="my.1password.com"
    
    if ! read_password "Domain (default: $default_domain)" _1PASS_DOMAIN $default_domain
    then
	verb "Login cancelled"
	exit 1
    fi

    if ! read_password "E-mail" _1PASS_EMAIL
    then
	verb "Login cancelled"
	exit 1
    fi

    if ! read_password "Secret Key" _1PASS_SECRET_KEY
    then
	verb "Login cancelled"
	exit 1
    fi

    if ! read_password "Master password for $_1PASS_EMAIL" _1PASS_MASTER_PASSWORD
    then
	verb "Login cancelled"
	exit 1
    fi

    eval $(run_op_with_input "$_1PASS_MASTER_PASSWORD" signin "$_1PASS_DOMAIN" "$_1PASS_EMAIL" "$_1PASS_SECRET_KEY")

    # Unset provided environment variable, if incorrect will have to manually ask user.
    # Also ensures this does not persist too long in memory.
    unset _1PASS_DOMAIN _1PASS_EMAIL _1PASS_SECRET_KEY _1PASS_MASTER_PASSWORD
}

function op_login_existing()
{
    local user="$1"
    local email="$(op_config_value $user email)"
    local prompt="Master password for $email"

    if ! read_password "$prompt" _1PASS_MASTER_PASSWORD
    then
	verb "Login cancelled"
	exit 1
    fi

    eval $(run_op_with_input "$_1PASS_MASTER_PASSWORD" signin $user)

    # Unset provided environment variable, if incorrect will have to manually ask user.
    # Also ensures this does not persist too long in memory.
    unset _1PASS_MASTER_PASSWORD
}

function op_login()
{
    local user
    
    while ! $(op_login_valid)
    do
	user="$(op_latest_signin)"

	if [[ "$user" == "" ]]; then
	    op_login_first_time
	    user="$(op_latest_signin)"
	else
	    op_login_existing $user
	fi
    done

    if [[ "$user" != "" ]]; then
	# Only non-empty if logged in for first time.
	local session="$(eval_variable OP_SESSION_${user})"
	echo "export OP_SESSION_${user}=$session"
    fi
}

function op_logout()
{
    if run_op signout
    then
	verb "Session logged out."
    else
	verb "Session already logged out."
    fi
    local user="$(op_latest_signin)"
    if [[ "$user" != "" ]]; then
	local session="$(eval_variable OP_SESSION_${user})"
	if [[ "$session" != "" ]]; then
	    echo "unset OP_SESSION_${user}"
	    verb "Session environment cleared."
	fi
    fi
}

function op_login_valid()
{
    local user="$(op_latest_signin)"
    if [[ "$user" == "" ]]; then
	verb "No op config or latest signin, must not be logged in."
	exit 1
    fi

    local session="$(eval_variable OP_SESSION_${user})"
    if [[ "$session" == "" ]]; then
	verb "No session key, must not be logged in."
	exit 1
    fi

    run_op list users >/dev/null
    local op_status=$?
    if [[ $op_status -ne 0 ]]; then
	verb "Session key timed out or invalid."
	exit 1
    else
	verb "Session key valid and logged in."
	exit 0
    fi
}

function op_domain()
{
    local user="$(op_latest_signin)"
    local url="$(op_config_value $user url)"

    echo ${url#https://}
}

function op_email()
{
    local user="$(op_latest_signin)"
    op_config_value $user email
}

function op_secret_key()
{
    local user="$(op_latest_signin)"
    op_config_value $user accountKey
}

function op_account_name()
{
    local user="$(op_latest_signin)"
    local userUUID="$(op_config_value $user userUUID)"
    local first_name="$(get_op_user_field "$userUUID" firstName)"
    local last_name="$(get_op_user_field "$userUUID" lastName)"

    if [[ "$first_name" == "" || "$last_name" == "" ]]; then
	error "cannot get account name"
    fi
    
    echo "1Password Account ($first_name $last_name)"
}

function op_master_password()
{
    local account_name="$(op_account_name)"

    get_op_item_password "$account_name"
}

# --------------------------------------------------------------------------------
short_opts="p:u:U:s:lvVtg"

function process_opt()
{
    local opt="$1"

    case "$opt" in
	p)
	    get_op_item_password "$OPTARG"
	    ;;
	u)
	    get_op_item_username "$OPTARG"
	    ;;
	U)
	    get_op_item_url "$OPTARG"
	    ;;
	s)
	    search_op_items "$OPTARG"
	    ;;
	l|list)
	    list_op_items
	    ;;
	v|verbose)
	    _1PASS_VERBOSE=true
	    ;;
	V|version)
	    show_version
	    ;;
	t|terminal)
	    _1PASS_INPUT=terminal
	    ;;
	g|gui)
	    _1PASS_INPUT=gui
	    ;;
	login)
	    op_login
	    ;;
	logout)
	    op_logout
	    ;;
	login-valid)
	    op_login_valid
	    ;;
	latest-signin)
	    op_latest_signin
	    ;;
	domain)
	    op_domain
	    ;;
	email)
	    op_email
	    ;;
	secret-key)
	    op_secret_key
	    ;;
	account-name)
	    op_account_name
	    ;;
	master-password)
	    op_master_password
	    ;;
	*)
	    usage
	    ;;
    esac
}

# --------------------------------------------------------------------------------
# Main

while getopts "${short_opts}-:" c
do
    case "$c" in
	-)
	    long_opt="$OPTARG"
	    OPTARG=""
	    process_opt "$long_opt"
	    ;;
	*)
	    process_opt "$c"
	    ;;
    esac
done
shift $((OPTIND - 1))
if [[ $# -ne 0 ]]; then
    usage
fi
exit 0

